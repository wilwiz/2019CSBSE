2019CSBSE 两个报告总结


1.适应性分区测试

解决的问题是，如何减少测试用例来节约测试时间。

报告提出的是一种自适应分区测试，结合随机测试和分区测试，引入反馈机制对分区选择概率进行调整。

随机测试是随机选取独立测试用例，分区测试是对测试用例集划分不相交区间。两者的结合指的是，先划分区间，后随机在区间中选择测试用例。

反馈机制指的是两种算法，即基于马尔科夫链算法和基于奖惩机制算法。基于马尔科夫链算法将分区视为待测软件状态，分区的选择过程则为状态迁移的过程，因此依据每次测试结果（状态）更新分区选择概率（状态迁移概率）；基于奖惩机制的算法认为，更有可能检测故障多的分区“奖励”更大选择概率，反之。


———————————————————
tips:
1.数据分布
报告中采用的方法本质是对数据分布度量。将数据分割成多个区间，然后按照概率进行选择。这种方法参考应用在程序运行之前，分析数据特征（数据分布），处理之后再运行。（数据的预处理可以完全影响到实验的结果，因此选择更强的处理策略尤为重要）。

2.数据分区
分区的思想，更细粒度地对个体进行挑选，这样使得好的个体尽量不被遗漏，从而可以尽量降低损失。

对数据分区的最终目的是减少测试用例，这在测试中可能并不太被认可。测试用例设计就是用来测试，减少之后肯定会降低其精度。如果测试用例数量对实验时间不会有太大影响，尽量不要减少测试用例。（类似特征降维）


文章的亮点在于将测试用例集分区处理，使得测试用例的选择更具代表性（更能检测到错误），而降低随机的误差。这种方法有点像保险，风险分摊之后意外发生率大的人回报也越大。



2.基于频谱的公式框架证明

解决问题，错误定位公式无标准，效果不稳定，无解释性。

报告提出了一种利用基因编程的方法，用于生成错误定位公式，并且理论证明公式的好坏。

基于频谱的错误定位是一种比较轻量的方法，方法中应用到的风险公式（怀疑度计算公式），用于计算程序语句出错的概率。

很大程度上，公式的优劣决定了定位效果的好坏。在过去的研究中，人为设计了很多公式，基于不同的想法。作者想，是否可以用机器自动生成公式作为计算。

在这种思想的启发下，采用基因编程的思路，对已有公式进行重新组合（分析树），这样就可以迭代生成新的公式。

实验比较发现，基因编程生成的公式比人工的公式更好，但又认识到一个问题：公式比较没有统一评判标准（实验设置，数据集选择，规模等等）。

因而从理论层面提出了有限集合下的最优理论框架（有限集合指的是公式集合是有限的，在这个集合中比较公式优劣）。符号化用例和语句，定义公式优劣的标准，将新生成的公式放入标准中进行推导证明确实新公式更好。

上面讨论的最优化框架只是局限于有限集合。那如果公式集合是无限的（即公式会不断更新进来），那如何比较公式的优劣呢？

作者接着提出无限集合下的最优理论框架。该框架发现公式计算的值存在边界，因此构造辅助概念作为公式最好的评判标准（具体可参考论文）。这样，无限集合下，就可以找出最好的公式。

作者从理论和实验证明基因编程算法生成的公式具有更好的定位效果。

———————————————————
tips:
1.组合思想
这里采用的基因编程生成公式，是一种对现有方法的一种无规则重组，随着迭代数量增加，会产生最优值。这种方法的应用偏向于无规则化，即基因编程库无规则。因此对该方法的使用需要先衡量是否满足使用条件，是否可用。

这种方法和变异测试存在差距，变异只是简单修改，不会有太大变动，因此生成的结果具有规律性，难以延伸过来。

2.理论证明
文章很大的亮点是理论的证明，是西方科学极为关注的逻辑层面的推演。这也是特别需要学习的。这里的证明过程分为两个部分，有限集合和无限集合。从问题到符号的转化是很容易让人理解的，这样也增强了两个证明的可理解性和较为完整的衔接。（将问题符号化，然后找相关数学理论作为推导依据证明）


重点在理论层面证明公式的好坏程度，可以引申到其他评估函数的度量（缺点预测的目标和现有的评估尺度），理论证明很重要。

